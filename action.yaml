name: KMP Build Desktop App
description: 'Build the desktop application for all platforms'
author: 'Mifos Initiative'
branding:
  icon: 'play'
  color: 'orange'

inputs:
  desktop_package_name:
    description: 'Name of the desktop project module'
    required: true

  build_type:
    description: 'Type of build to perform (Debug or Release)'
    required: false
    default: 'Debug'

outputs:
  windows_app:
    description: 'Path to Windows executable/installer'
    value: ${{ steps.collect-apps.outputs.windows_app }}

  linux_app:
    description: 'Path to Linux package'
    value: ${{ steps.collect-apps.outputs.linux_app }}

  macos_app:
    description: 'Path to MacOS package'
    value: ${{ steps.collect-apps.outputs.macos_app }}

runs:
  using: 'composite'
  steps:
    - name: Set up Java development environment
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: '17'

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v4

    # Cache Gradle dependencies and build outputs to speed up future builds
    - name: Cache Gradle and build outputs
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
          build
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: ${{ runner.os }}-gradle-

    - name: Package Desktop App
      shell: bash
      run: |
        # Determine the package command based on build type
        if [[ "${{ inputs.build_type }}" == "Release" ]]; then
          ./gradlew packageReleaseDistributionForCurrentOS
        else
          ./gradlew packageDistributionForCurrentOS
        fi

    - name: Collect App Paths
      id: collect-apps
      shell: bash
      run: |
        # Find app paths for each OS
        windows_app=$(find . -path "**/*.exe" -o -path "**/*.msi" | grep -E "windows|win" | head -n 1)
        linux_app=$(find . -path "**/*.deb" | head -n 1)
        macos_app=$(find . -path "**/*.dmg" | head -n 1)

        # Output app paths
        echo "windows_app=${windows_app}" >> $GITHUB_OUTPUT
        echo "linux_app=${linux_app}" >> $GITHUB_OUTPUT
        echo "macos_app=${macos_app}" >> $GITHUB_OUTPUT

        # Print for logging
        echo "Windows App: ${windows_app}"
        echo "Linux App: ${linux_app}"
        echo "MacOS App: ${macos_app}"

    # Upload Windows executables and installers
    - name: Upload Windows Apps
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: Windows-Apps
        path: |
          **/*.exe
          **/*.msi

    # Upload Linux package
    - name: Upload Linux App
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: Linux-App
        path: '**/*.deb'

    # Upload MacOS package
    - name: Upload MacOS App
      if: matrix.os == 'macos-latest'
      uses: actions/upload-artifact@v4
      with:
        name: MacOS-App
        path: '**/*.dmg'